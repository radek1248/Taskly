<h1>My Task Collections</h1>

<ul>
  {{#each collections}}
    <li style="position: relative; margin-bottom: 1rem;">
      <div class="collection-display" data-id="{{Collection_id}}">
        <span class="collection-title" data-id="{{Collection_id}}">{{Title}}</span>
        <span class="collection-description" data-id="{{Collection_id}}">{{Description}}</span>

        <button class="options-button" type="button">‚ãØ</button>
        <div class="options-menu" style="display: none; position: absolute; right: 0; background: white; border: 1px solid #ccc; border-radius: 0.5rem; box-shadow: 0 2px 5px rgba(0,0,0,0.1); padding: 0.5rem; z-index: 10;">
          <button type="button" class="edit-button" data-id="{{Collection_id}}">Edit</button>
          <button type="button" class="delete-button" data-id="{{Collection_id}}" style="color: red;">Delete</button>
        </div>

        <button class="toggle-tasks-button" data-id="{{Collection_id}}" style="margin-top: 0.5rem;">Show Tasks</button>
        <ul class="tasks-list" data-id="{{Collection_id}}" style="display: none; margin-left: 1rem; margin-top: 0.5rem;"></ul>
      </div>

      <button class="show-task-form-button" data-id="{{Collection_id}}" style="margin-top: 0.5rem;">+ Add Task</button>

      <form class="new-task-form" data-id="{{Collection_id}}" style="display: none; margin-top: 0.5rem;" method="POST" action="/tasks-collection/{{Collection_id}}/tasks">
        <input type="text" name="Title" placeholder="Task title" required />
        <input type="text" name="Description" placeholder="Task description" />
        <button type="submit">Save</button>
        <button type="button" class="cancel-task-button">Cancel</button>
      </form>

      <form class="edit-form" method="POST" action="/tasks-collection/{{Collection_id}}?_method=PATCH" style="display: none;">
        <input type="text" name="Title" value="{{Title}}" required placeholder="Title" />
        <input type="text" name="Description" value="{{Description}}" placeholder="Description" />
        <button type="submit">Save</button>
        <button type="button" class="cancel-edit-button">Cancel</button>
      </form>
    </li>
  {{/each}}

  <li id="newCollectionFormContainer" style="display:none;">
    <form id="newCollectionForm" method="POST" action="/tasks-collection/new">
      <input type="text" id="newCollectionTitle" name="Title" placeholder="Enter collection name" autofocus />
      <input type="hidden" name="User_id" value="{{userId}}" />
      <button type="submit">Save</button>
      <button type="button" id="cancelNewCollection">Cancel</button>
    </form>
  </li>
</ul>

<button class="newCollectionButton">Create New Collection</button>

<script>
  document.querySelector('.newCollectionButton').addEventListener('click', () => {
    document.getElementById('newCollectionFormContainer').style.display = 'block';
    document.getElementById('newCollectionTitle').focus();
  });

  document.getElementById('cancelNewCollection').addEventListener('click', () => {
    document.getElementById('newCollectionFormContainer').style.display = 'none';
    document.getElementById('newCollectionTitle').value = '';
  });

  document.getElementById('newCollectionForm').addEventListener('submit', e => {
    const title = document.getElementById('newCollectionTitle').value.trim();
    if (!title) {
      e.preventDefault();
      alert('Please enter a valid collection name.');
    }
  });

  document.querySelectorAll('.toggle-tasks-button').forEach(button => {
    button.addEventListener('click', async function () {
      const collectionId = this.dataset.id;
      const taskList = document.querySelector(`.tasks-list[data-id="${collectionId}"]`);
      const isVisible = taskList.style.display === 'block';

      if (isVisible) {
        taskList.style.display = 'none';
        this.textContent = 'Show Tasks';
        return;
      }

      if (taskList.children.length === 0) {
        try {
          const response = await fetch(`/tasks-collection/${collectionId}/tasks`);
          const text = await response.text();
          const tasks = JSON.parse(text || '[]');

          taskList.innerHTML = tasks.length
            ? tasks.map(task => `
              <li data-task-id="${task.Task_id}">
                <div class="task-display" data-task-id="${task.Task_id}">
                  <span class="task-title">${task.Title}</span> - 
                  <span class="task-desc">${task.Description || ''}</span>
                  <button class="delete-task-button" data-task-id="${task.Task_id}" style="margin-left: 1rem; color: red;">üóëÔ∏è</button>
                </div>
                <form class="task-edit-form" data-task-id="${task.Task_id}" method="POST" action="/tasks-collection/tasks/${task.Task_id}?_method=PATCH" style="display:none;">
                  <input type="text" name="Title" value="${task.Title}" required />
                  <input type="text" name="Description" value="${task.Description || ''}" />
                  <button type="submit">Save</button>
                  <button type="button" class="cancel-task-edit">Cancel</button>
                </form>
              </li>`).join('')
            : '<li>No tasks found</li>';
        } catch (error) {
          console.error('Failed to load tasks:', error);
          taskList.innerHTML = '<li>Error loading tasks</li>';
        }
      }

      taskList.style.display = 'block';
      this.textContent = 'Hide Tasks';
    });
  });

  document.querySelectorAll('.collection-title, .collection-description').forEach(el => {
    el.addEventListener('dblclick', function () {
      const id = this.dataset.id;
      const container = document.querySelector(`.collection-display[data-id="${id}"]`).closest('li');
      const editForm = container.querySelector('.edit-form');
      const display = container.querySelector('.collection-display');

      display.style.display = 'none';
      editForm.style.display = 'block';
      editForm.querySelector('input[name="Title"]').focus();
    });
  });

  document.querySelectorAll('.cancel-edit-button').forEach(button => {
    button.addEventListener('click', function () {
      const form = this.closest('.edit-form');
      const container = form.closest('li');
      const display = container.querySelector('.collection-display');

      form.style.display = 'none';
      display.style.display = 'block';
    });
  });

  document.querySelectorAll('.options-button').forEach(button => {
    button.addEventListener('click', e => {
      const menu = e.target.nextElementSibling;
      menu.style.display = menu.style.display === 'block' ? 'none' : 'block';
    });
  });

  document.addEventListener('click', e => {
    if (!e.target.closest('.options-button') && !e.target.closest('.options-menu')) {
      document.querySelectorAll('.options-menu').forEach(menu => menu.style.display = 'none');
    }
  });

  document.querySelectorAll('.edit-button').forEach(btn => {
    btn.addEventListener('click', function () {
      const id = this.dataset.id;
      const container = document.querySelector(`.collection-display[data-id="${id}"]`).closest('li');
      const editForm = container.querySelector('.edit-form');
      const display = container.querySelector('.collection-display');

      display.style.display = 'none';
      editForm.style.display = 'block';
      editForm.querySelector('input[name="Title"]').focus();
    });
  });

  document.querySelectorAll('.delete-button').forEach(button => {
    button.addEventListener('click', async function () {
      const collectionId = this.getAttribute('data-id');
      if (!confirm('Are you sure you want to delete this collection?')) return;

      try {
        const response = await fetch(`/tasks-collection/${collectionId}`, { method: 'DELETE' });
        if (response.ok) this.closest('li').remove();
        else alert('Failed to delete collection');
      } catch (error) {
        console.error('Error deleting collection:', error);
        alert('Something went wrong');
      }
    });
  });

  document.querySelectorAll('.show-task-form-button').forEach(button => {
    button.addEventListener('click', function () {
      const id = this.dataset.id;
      const form = document.querySelector(`.new-task-form[data-id="${id}"]`);
      form.style.display = 'block';
      this.style.display = 'none';
      form.querySelector('input[name="Title"]').focus();
    });
  });

  document.querySelectorAll('.cancel-task-button').forEach(button => {
    button.addEventListener('click', function () {
      const form = this.closest('.new-task-form');
      const id = form.dataset.id;
      const showBtn = document.querySelector(`.show-task-form-button[data-id="${id}"]`);

      form.reset();
      form.style.display = 'none';
      showBtn.style.display = 'inline';
    });
  });

  document.querySelectorAll('.new-task-form').forEach(form => {
    form.addEventListener('submit', function (e) {
      const title = this.querySelector('input[name="Title"]').value.trim();
      const desc = this.querySelector('input[name="Description"]').value.trim();
      if (!title) {
        e.preventDefault();
        alert('Please fill in title.');
      }
    });
  });

  document.addEventListener('dblclick', function (e) {
    const taskDisplay = e.target.closest('.task-display');
    if (taskDisplay) {
      const taskId = taskDisplay.dataset.taskId;
      const li = document.querySelector(`li[data-task-id="${taskId}"]`);
      const form = li.querySelector('.task-edit-form');
      taskDisplay.style.display = 'none';
      form.style.display = 'block';
      form.querySelector('input[name="Title"]').focus();
    }
  });

  document.addEventListener('click', function (e) {
    if (e.target.classList.contains('cancel-task-edit')) {
      const form = e.target.closest('.task-edit-form');
      const taskId = form.dataset.taskId;
      const taskDisplay = document.querySelector(`.task-display[data-task-id="${taskId}"]`);
      form.style.display = 'none';
      taskDisplay.style.display = 'block';
    }
  });

  document.addEventListener('click', async function (e) {
    if (e.target.classList.contains('delete-task-button')) {
      const taskId = e.target.getAttribute('data-task-id');
      if (!confirm('Are you sure you want to delete this task?')) return;

      try {
        const response = await fetch(`/tasks-collection/tasks/${taskId}`, { method: 'DELETE' });
        if (response.ok) e.target.closest('li').remove();
        else alert('Failed to delete task.');
      } catch (error) {
        console.error('Error deleting task:', error);
        alert('Something went wrong.');
      }
    }
  });
</script>
